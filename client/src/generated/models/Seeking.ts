/* tslint:disable */
/* eslint-disable */
/**
 * Flat Finder REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ListingAuthor } from './ListingAuthor';
import {
    ListingAuthorFromJSON,
    ListingAuthorFromJSONTyped,
    ListingAuthorToJSON,
} from './ListingAuthor';
import type { ListingContactInfo } from './ListingContactInfo';
import {
    ListingContactInfoFromJSON,
    ListingContactInfoFromJSONTyped,
    ListingContactInfoToJSON,
} from './ListingContactInfo';
import type { Location } from './Location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
} from './Location';

/**
 * 
 * @export
 * @interface Seeking
 */
export interface Seeking {
    /**
     * 
     * @type {string}
     * @memberof Seeking
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Seeking
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Seeking
     */
    description: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Seeking
     */
    photoUrls?: Array<string>;
    /**
     * 
     * @type {Location}
     * @memberof Seeking
     */
    preferredLocation: Location;
    /**
     * 
     * @type {ListingAuthor}
     * @memberof Seeking
     */
    author: ListingAuthor;
    /**
     * 
     * @type {ListingContactInfo}
     * @memberof Seeking
     */
    contactInfo: ListingContactInfo;
}

/**
 * Check if a given object implements the Seeking interface.
 */
export function instanceOfSeeking(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "preferredLocation" in value;
    isInstance = isInstance && "author" in value;
    isInstance = isInstance && "contactInfo" in value;

    return isInstance;
}

export function SeekingFromJSON(json: any): Seeking {
    return SeekingFromJSONTyped(json, false);
}

export function SeekingFromJSONTyped(json: any, ignoreDiscriminator: boolean): Seeking {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'description': json['description'],
        'photoUrls': !exists(json, 'photoUrls') ? undefined : json['photoUrls'],
        'preferredLocation': LocationFromJSON(json['preferredLocation']),
        'author': ListingAuthorFromJSON(json['author']),
        'contactInfo': ListingContactInfoFromJSON(json['contactInfo']),
    };
}

export function SeekingToJSON(value?: Seeking | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'title': value.title,
        'description': value.description,
        'photoUrls': value.photoUrls,
        'preferredLocation': LocationToJSON(value.preferredLocation),
        'author': ListingAuthorToJSON(value.author),
        'contactInfo': ListingContactInfoToJSON(value.contactInfo),
    };
}

