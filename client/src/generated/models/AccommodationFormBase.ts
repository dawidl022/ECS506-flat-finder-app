/* tslint:disable */
/* eslint-disable */
/**
 * Flat Finder REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccommodationAddress } from './AccommodationAddress';
import {
    AccommodationAddressFromJSON,
    AccommodationAddressFromJSONTyped,
    AccommodationAddressToJSON,
} from './AccommodationAddress';

/**
 * 
 * @export
 * @interface AccommodationFormBase
 */
export interface AccommodationFormBase {
    /**
     * 
     * @type {string}
     * @memberof AccommodationFormBase
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof AccommodationFormBase
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof AccommodationFormBase
     */
    accommodationType: string;
    /**
     * 
     * @type {number}
     * @memberof AccommodationFormBase
     */
    numberOfRooms: number;
    /**
     * 
     * @type {number}
     * @memberof AccommodationFormBase
     */
    price: number;
    /**
     * 
     * @type {AccommodationAddress}
     * @memberof AccommodationFormBase
     */
    address: AccommodationAddress;
}

/**
 * Check if a given object implements the AccommodationFormBase interface.
 */
export function instanceOfAccommodationFormBase(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "accommodationType" in value;
    isInstance = isInstance && "numberOfRooms" in value;
    isInstance = isInstance && "price" in value;
    isInstance = isInstance && "address" in value;

    return isInstance;
}

export function AccommodationFormBaseFromJSON(json: any): AccommodationFormBase {
    return AccommodationFormBaseFromJSONTyped(json, false);
}

export function AccommodationFormBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccommodationFormBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': json['title'],
        'description': json['description'],
        'accommodationType': json['accommodationType'],
        'numberOfRooms': json['numberOfRooms'],
        'price': json['price'],
        'address': AccommodationAddressFromJSON(json['address']),
    };
}

export function AccommodationFormBaseToJSON(value?: AccommodationFormBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'description': value.description,
        'accommodationType': value.accommodationType,
        'numberOfRooms': value.numberOfRooms,
        'price': value.price,
        'address': AccommodationAddressToJSON(value.address),
    };
}

