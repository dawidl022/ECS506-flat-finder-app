openapi: 3.0.0
info:
  title: Flat Finder REST API
  version: 0.1.0

paths:
  /api/v1/login/google:
    post:
      summary: Login into the application with Google Single Sign-On (SSO)
      security: []
      responses:
        "302":
          description: Redirect to Google auth provider.
          # TODO describe what happens after a successful and unsuccessful auth flow
          # e.g. redirect back to frontend, where can JWT token be found
          headers:
            Location:
              description: URL of google auth provider request
              schema:
                type: string
            Set-Cookie:
              description: Cookie to keep track of authentication request
              schema:
                type: string

  /api/v1/listings/accommodation:
    get:
      summary: Get a list of accommodation listings, optionally filtered and sorted
      parameters:
        - $ref: "#/components/parameters/searchLocation"
        - $ref: "#/components/parameters/searchRadius"
        - $ref: "#/components/parameters/maxPriceFilter"
        - $ref: "#/components/parameters/sourcesFilter"
        - $ref: "#/components/parameters/sortAccommodationsBy"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/size"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/accommodationSearchResults"

    post:
      summary: Create a new accommodation listing
      description: >-
        Create an accommodation listing as the currently logged in user.
        Listing will be made visible to other users.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/accommodationForm"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/accommodationDetails"

  /api/v1/listings/accommodation/{listingId}:
    get:
      summary: Get the details of an accommodation listing
      parameters:
        - $ref: "#/components/parameters/listingId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/accommodationDetails"
        "404":
          description: Listing not found

    put:
      summary: Update an accommodation listing
      description: >-
        Update specified accommodation listing if owner is currently logged in
        user. Does not allow for updating photos to save bandwidth. Use
        dedicated photos endpoint for this use case.
      parameters:
        - $ref: "#/components/parameters/listingId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/accommodationFormBase"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/accommodationDetails"
        "403":
          description: Forbidden. User has no rights to edit listing.
        "404":
          description: Listing not found

    delete:
      summary: Delete an accommodation listing
      description: >-
        Delete specified accommodation listing if owner is currently logged in
        user
      parameters:
        - $ref: "#/components/parameters/listingId"
      responses:
        "204":
          description: Listing deleted successfully. No content to return.
        "403":
          description: Forbidden. User has no rights to delete listing.
        "404":
          description: Listing not found

  /api/v1/listings/seeking:
    get:
      summary: Get a list of seeking listings
      parameters:
        - $ref: "#/components/parameters/searchLocation"
        - $ref: "#/components/parameters/searchRadius"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/size"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/seekingSearchResults"

    post:
      summary: Create a new seeking listing
      description: >-
        Create an seeking listing as the currently logged in user.
        Listing will be made visible to other users.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/seekingForm"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/seekingDetails"

  /api/v1/listings/seeking/{listingId}:
    get:
      summary: Get the details of a seeking listing
      parameters:
        - $ref: "#/components/parameters/listingId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/seekingDetails"
        "404":
          description: Listing not found

    put:
      summary: Update an seeking listing
      description: >-
        Update specified seeking listing if owner is currently logged in
        user. Does not allow for updating photos to save bandwidth. Use
        dedicated photos endpoint for this use case.
      parameters:
        - $ref: "#/components/parameters/listingId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/seekingFormBase"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/seekingDetails"
        "403":
          description: Forbidden. User has no rights to edit listing.
        "404":
          description: Listing not found

    delete:
      summary: Delete a seeking listing
      description: >-
        Delete specified seeking listing if owner is currently logged in
        user
      parameters:
        - $ref: "#/components/parameters/listingId"
      responses:
        "204":
          description: Listing deleted successfully. No content to return.
        "403":
          description: Forbidden. User has no rights to delete listing.
        "404":
          description: Listing not found

  /api/v1/listings/{listingId}/photos:
    post:
      summary: Upload new photo for a listing
      parameters:
        - $ref: "#/components/parameters/listingId"
      requestBody:
        content:
          image:
            schema:
              type: string
              format: binary
      responses:
        "204":
          description: Photo uploaded successfully. No content to return.
        "403":
          description: Forbidden. User has no rights to edit listing photos.
        "404":
          description: Listing not found

  /api/v1/listings/{listingId}/photos/{photoId}:
    get:
      summary: Get a listing photo
      parameters:
        - $ref: "#/components/parameters/listingId"
        - $ref: "#/components/parameters/photoId"
      responses:
        "200":
          description: OK
          content:
            image:
              schema:
                type: string
                format: binary
        "404":
          description: Listing or photo not found

    delete:
      summary: Delete a listing photo
      parameters:
        - $ref: "#/components/parameters/listingId"
        - $ref: "#/components/parameters/photoId"
      responses:
        "204":
          description: Photo deleted successfully. No content to return.
        "403":
          description: Forbidden. User has no rights to edit listing photos.
        "404":
          description: Listing or photo not found

  /api/v1/users:
    get:
      summary: Get all users registered in system
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/usersList"
        "403":
          description: Forbidden. Logged in user is not an admin.

  /api/v1/users/{userId}:
    delete:
      summary: Delete a user from the system
      description: >-
        Deleting a user deletes all of their data, but does not prevent the
        user with the email address from registering again.
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "204":
          description: User deleted successfully. No content to return.
        "403":
          description: Forbidden. Logged in user is not an admin.

  /api/v1/users/{userId}/profile:
    get:
      summary: Get the profile of a user
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userProfile"
        "404":
          description: User with given ID not found.
    put:
      summary: Update user profile
      description:
        Can be used to both complete for the first time as well as update the
        profile of the currently logged in user.
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userProfileForm"
      responses:
        "204":
          description: Profile updated successfully. No content to return.
        "403":
          description: Forbidden. Logged in user does not own the profile.
        "404":
          description: User with given ID not found.

  /api/v1/users/{userId}/profile/photo:
    get:
      summary: Get the profile picture of a user
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: OK
          content:
            image:
              schema:
                type: string
                format: binary
        "404":
          description: User or profile photo not found.

    put:
      summary: Upload the user's profile picture
      description:
        Can be used to both upload for the first time as well as update the
        profile photo of the currently logged in user.
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        content:
          image:
            schema:
              type: string
              format: binary
      responses:
        "204":
          description: Photo updated. No content to return.
        "403":
          description: Forbidden. Logged in user does not own the profile.
        "404":
          description: User not found.

    delete:
      summary: Delete the user's profile picture
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "204":
          description: Photo deleted successfully. No content to return.
        "403":
          description: Forbidden. Logged in user does not own the profile.
        "404":
          description: User not found.

  /api/v1/users/{userId}/listings:
    get:
      summary: Get all listings created by a user
      description: >-
        Get all accommodation and seeking listings created by given user
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userListings"
        "404":
          description: User not found.

  /api/v1/users/{userId}/favourites:
    get:
      summary: Get all listings favourited by a user
      description: >-
        Get all accommodation and seeking listings favourited by given user.
        Favourite lists are private to each user, so only account owner can
        retrieve this list.
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userListings"
        "403":
          description: Forbidden. Logged in user does not own the favourites list.
        "404":
          description: User not found.

  /api/v1/users/{userId}/favourites/{listingId}:
    put:
      summary: Add listing to user favourites
      description: >-
        Add listing with the given listingId to the user's favourites. This
        operation is a noop if the user already has the listing in their favourites.
        Favourite lists are private to each user, so only account owner can
        add the favourite to the list.
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/listingId"
      responses:
        "204":
          description: Favourite added. No content to return.
        "403":
          description: Forbidden. Logged in user does not own the favourites list.
        "404":
          description: User not found.
    delete:
      summary: Remove listing from user favourites
      description: >-
        Remove listing with the given listingId from the user's favourites. This
        operation is a noop if the user doesn't have the listing in their favourites.
        Favourite lists are private to each user, so only account owner can
        remove the favourite from the list.
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/listingId"
      responses:
        "204":
          description: Favourite removed. No content to return.
        "403":
          description: Forbidden. Logged in user does not own the favourites list.
        "404":
          description: User not found.

  /api/v1/admins/{userId}:
    get:
      summary: Check if user has admin privileges
      description: >-
        Check if user with given id has admin privileges. Can be called by the 
        if the userId parameter matches the logged in user's userId. Admins
        can always call this endpoint.
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "204":
          description: >-
            User has admin privileges. No content to return.
        "403":
          description: >-
            Forbidden. Logged in user is neither the account owner nor an admin.
        "404":
          description: >-
            User does not have admin privileges or does not exist.

    put:
      summary: Grant admin privileges to user
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "204":
          description: >-
            User granted admin privileges successfully. No content to return.
        "403":
          description: Forbidden. Logged in user is not an admin.

    delete:
      summary: Revoke admin privileges from user
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "204":
          description: >-
            User revoked admin privileges successfully. No content to return.
        "403":
          description: Forbidden. Logged in user is not an admin.

components:
  schemas:
    accommodationSearchResults:
      type: array
      items:
        type: object
        required:
          - distance
          - isFavourite
          - accommodation
        properties:
          distance:
            $ref: "#/components/schemas/distance"
          isFavourite:
            $ref: "#/components/schemas/isFavourite"
          accommodation:
            $ref: "#/components/schemas/accommodationSummary"

    seekingSearchResults:
      type: array
      items:
        type: object
        required:
          - distance
          - isFavourite
          - seeking
        properties:
          distance:
            $ref: "#/components/schemas/distance"
          isFavourite:
            $ref: "#/components/schemas/isFavourite"
          accommodation:
            $ref: "#/components/schemas/seekingSummary"

    accommodationDetails:
      type: object
      required:
        - isFavourite
        - accommodation
      properties:
        isFavourite:
          $ref: "#/components/schemas/isFavourite"
        accommodation:
          $ref: "#/components/schemas/accommodation"

    distance:
      type: number
      description: Listing's distance in km from search location

    isFavourite:
      type: boolean
      description: Does the listing exist in the user's favourites

    accommodationSummary:
      type: object
      required:
        - id
        - title
        - shortDescription
        - thumbnailUrl
        - accommodationType
        - numberOfRooms
        - source
        - price
        - postCode
      properties:
        id:
          $ref: "#/components/schemas/listingId"
        title:
          $ref: "#/components/schemas/listingTitle"
        shortDescription:
          $ref: "#/components/schemas/listingShortDescription"
        thumbnailUrl:
          $ref: "#/components/schemas/listingThumbnailUrl"
        accommodationType:
          $ref: "#/components/schemas/accommodationType"
        numberOfRooms:
          $ref: "#/components/schemas/accommodationNumberOfRooms"
        source:
          $ref: "#/components/schemas/listingSource"
        price:
          $ref: "#/components/schemas/accommodationPrice"
        postCode:
          $ref: "#/components/schemas/accommodationPostCode"

    accommodation:
      type: object
      required:
        - id
        - title
        - description
        - photoUrls
        - accommodationType
        - numberOfRooms
        - source
        - price
        - address
        - author
        - contactInfo
      properties:
        id:
          $ref: "#/components/schemas/listingId"
        title:
          $ref: "#/components/schemas/listingTitle"
        description:
          $ref: "#/components/schemas/listingDescription"
        photoUrls:
          $ref: "#/components/schemas/listingPhotoUrls"
        accommodationType:
          $ref: "#/components/schemas/accommodationType"
        numberOfRooms:
          $ref: "#/components/schemas/accommodationNumberOfRooms"
        source:
          $ref: "#/components/schemas/listingSource"
        price:
          $ref: "#/components/schemas/accommodationPrice"
        address:
          $ref: "#/components/schemas/accommodationAddress"
        author:
          $ref: "#/components/schemas/listingAuthor"
        originalListingUrl:
          $ref: "#/components/schemas/listingOriginalUrl"
        contactInfo:
          $ref: "#/components/schemas/listingContactInfo"

    accommodationForm:
      type: object
      required:
        - title
        - description
        - photos
        - accommodationType
        - numberOfRooms
        - price
        - address
      properties:
        title:
          $ref: "#/components/schemas/listingTitle"
        description:
          $ref: "#/components/schemas/listingDescription"
        photos:
          $ref: "#/components/schemas/listingPhotos"
        accommodationType:
          $ref: "#/components/schemas/accommodationType"
        numberOfRooms:
          $ref: "#/components/schemas/accommodationNumberOfRooms"
        price:
          $ref: "#/components/schemas/accommodationPrice"
        address:
          $ref: "#/components/schemas/accommodationAddress"

    accommodationFormBase:
      type: object
      required:
        - title
        - description
        - accommodationType
        - numberOfRooms
        - price
        - address
      properties:
        title:
          $ref: "#/components/schemas/listingTitle"
        description:
          $ref: "#/components/schemas/listingDescription"
        accommodationType:
          $ref: "#/components/schemas/accommodationType"
        numberOfRooms:
          $ref: "#/components/schemas/accommodationNumberOfRooms"
        price:
          $ref: "#/components/schemas/accommodationPrice"
        address:
          $ref: "#/components/schemas/accommodationAddress"

    seekingSummary:
      type: object
      required:
        - id
        - title
        - shortDescription
      properties:
        id:
          $ref: "#/components/schemas/listingId"
        title:
          $ref: "#/components/schemas/listingTitle"
        shortDescription:
          $ref: "#/components/schemas/listingShortDescription"
        thumbnailUrl:
          $ref: "#/components/schemas/listingThumbnailUrl"

    seekingDetails:
      type: object
      required:
        - isFavourite
        - seeking
      properties:
        isFavourite:
          $ref: "#/components/schemas/isFavourite"
        accommodation:
          $ref: "#/components/schemas/seeking"

    seeking:
      type: object
      required:
        - id
        - title
        - description
        - preferredLocation
        - author
        - contactInfo
      properties:
        id:
          $ref: "#/components/schemas/listingId"
        title:
          $ref: "#/components/schemas/listingTitle"
        description:
          $ref: "#/components/schemas/listingDescription"
        photoUrls:
          $ref: "#/components/schemas/listingPhotoUrls"
        preferredLocation:
          $ref: "#/components/schemas/location"
        author:
          $ref: "#/components/schemas/listingAuthor"
        contactInfo:
          $ref: "#/components/schemas/listingContactInfo"

    seekingForm:
      type: object
      required:
        - title
        - description
        - preferredLocation
      properties:
        title:
          $ref: "#/components/schemas/listingTitle"
        description:
          $ref: "#/components/schemas/listingDescription"
        photos:
          $ref: "#/components/schemas/listingPhotos"
        preferredLocation:
          $ref: "#/components/schemas/location"

    seekingFormBase:
      type: object
      required:
        - title
        - description
        - preferredLocation
      properties:
        title:
          $ref: "#/components/schemas/listingTitle"
        description:
          $ref: "#/components/schemas/listingDescription"
        preferredLocation:
          $ref: "#/components/schemas/location"

    listingId:
      type: string

    photoId:
      type: string

    listingTitle:
      type: string

    listingShortDescription:
      type: string

    listingThumbnailUrl:
      type: string

    listingSource:
      type: string

    listingDescription:
      type: string

    listingPhotoUrls:
      type: array
      items:
        type: string

    listingPhotos:
      type: array
      items:
        type: string
        format: binary
      minItems: 1
      maxItems: 15

    listingAuthor:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    listingOriginalUrl:
      type: string

    listingContactInfo:
      type: object
      properties:
        phoneNumber:
          type: string
        email:
          type: string

    location:
      type: object
      required:
        - name
        - coordinates
      properties:
        name:
          type: string
        coordinates:
          $ref: "#/components/schemas/coordinates"

    coordinates:
      type: object
      required:
        - lat
        - long
      properties:
        lat:
          type: number
          description: Latitude
        long:
          type: number
          description: Longitude

    accommodationType:
      type: string

    accommodationNumberOfRooms:
      type: integer
      minimum: 1

    accommodationPrice:
      type: number
      minimum: 0

    accommodationAddress:
      anyOf:
        - $ref: "#/components/schemas/UKAddress"

    accommodationPostCode:
      type: string

    UKAddress:
      type: object
      required:
        - line1
        - town
        - postCode
      properties:
        line1:
          type: string
        line2:
          type: string
        town:
          type: string
        postCode:
          type: string

    usersList:
      type: array
      items:
        $ref: "#/components/schemas/user"

    user:
      type: object
      required:
        - id
        - email
        - isAdmin
      properties:
        id:
          $ref: "#/components/schemas/userId"
        email:
          $ref: "#/components/schemas/userEmail"
        name:
          $ref: "#/components/schemas/userName"
        isAdmin:
          type: boolean

    userProfile:
      type: object
      required:
        - id
        - email
        - name
        - contactDetails
      properties:
        id:
          $ref: "#/components/schemas/userId"
        email:
          $ref: "#/components/schemas/userEmail"
        name:
          $ref: "#/components/schemas/userName"
        contactDetails:
          $ref: "#/components/schemas/userContactDetails"

    userProfileForm:
      type: object
      required:
        - name
        - contactDetails
      properties:
        name:
          $ref: "#/components/schemas/userName"
        contactDetails:
          $ref: "#/components/schemas/userContactDetails"

    userId:
      type: string

    userEmail:
      type: string
      format: email

    userName:
      type: string

    userContactDetails:
      type: object
      required:
        - phoneNumber
      properties:
        phoneNumber:
          type: string

    userListings:
      type: array
      description: >-
        Array containing both seeking and accommodation listings. The listing
        type can be identified by the 'type' property
      items:
        type: object
        required:
          - type
          - listing
        properties:
          type:
            type: string
            enum:
              - accommodation
              - seeking
          listing:
            anyOf:
              - $ref: "#/components/schemas/accommodationSummary"
              - $ref: "#/components/schemas/seekingSummary"

  parameters:
    searchLocation:
      name: location
      in: query
      required: true
      description: Location to search for nearby accommodation
      schema:
        type: string

    searchRadius:
      name: radius
      in: query
      required: true
      description: Maximum search radius from location
      schema:
        type: number

    maxPriceFilter:
      name: max_price
      in: query
      required: false
      description: Maximum monthly price of accommodations
      schema:
        $ref: "#/components/schemas/accommodationPrice"

    sourcesFilter:
      name: sources
      in: query
      required: false
      description: >-
        Comma-separated list of sources to fetch listings from. If not
        provided, searches in all available sources in the country of the
        searched location
      schema:
        type: array
        items:
          type: string
      explode: false

    sortAccommodationsBy:
      name: sort_by
      in: query
      required: false
      description: >-
        How listings should be sorted in the search results. Affects which
        page listings appear on. If not provided, the listings are not
        sorted by most recent first
      schema:
        type: string
        enum:
          - newest
          - cheapest
          - closest

    page:
      name: page
      in: query
      required: false
      description: >-
        Zero-based index of the page of the search results. If not provided,
        the first page is returned. Should use the same size parameter when
        retrieving subsequent pages to get continuous results.
      schema:
        type: integer
        minimum: 0
        default: 0

    size:
      name: size
      in: query
      required: false
      description: The number of listings to return in the search results.
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10

    listingId:
      name: listingId
      in: path
      required: true
      description: ID of the listing to fetch or apply the operation on
      schema:
        $ref: "#/components/schemas/listingId"

    photoId:
      name: photoId
      in: path
      required: true
      description: ID of the photo to fetch or apply the operation on
      schema:
        $ref: "#/components/schemas/photoId"

    userId:
      name: userId
      in: path
      required: true
      description: ID of the user to fetch or apply the operation on
      schema:
        $ref: "#/components/schemas/userId"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
